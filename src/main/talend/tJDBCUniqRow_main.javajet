//Copyright 2015 Paul Tegelaar
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//

<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map
    	java.util.Date    	   
    	" 
%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();	
    
    String idColumn = ElementParameterParser.getValue(node, "__idColumn__");
    String sqlQuery = ElementParameterParser.getValue(node, "__sqlQuery__");
%>

<%

// Search incoming schema
IMetadataTable inMetadata = null;
IMetadataTable uniqueOutMetadata = null;
IMetadataTable duplicateOutMetadata = null;
IConnection inConnection = null;
String inConnectionName = null;

List<? extends IConnection> inConnections = node.getIncomingConnections();
List<? extends IConnection> connsUnique = node.getOutgoingConnections("UNIQUE");
List<? extends IConnection> connsDuplicate = node.getOutgoingConnections("DUPLICATE");


if (inConnections != null && inConnections.size()>0) { //1 open
	for (int i = 0; i < inConnections.size(); i++) { //2 open
		IConnection connection = inConnections.get(i);
    	if (connection.getLineStyle().hasConnectionCategory(
    			IConnectionCategory.DATA)) { //3 open
		    inConnection = connection;
		    inConnectionName = inConnection.getName();
		    inMetadata = inConnection.getMetadataTable();
		    break;
    	}//3 close
	}//2 close
}//1 close

//Iterate over incoming data
String inRowName = inConnection.getName();
if (inMetadata != null) {//4 open
	List<IMetadataColumn> columns = inMetadata.getListColumns();
	for (int i = 0; i < columns.size(); i++){//5 open
		IMetadataColumn column = columns.get(i);
		String inLabelName = column.getLabel();
		
		
		
		
		if(idColumn.equals(inLabelName)){//6 open
		%>
		
		
			if(ip_<%=cid %>.check(String.valueOf(<%=inRowName%>.<%=column.getLabel()%>), <%=sqlQuery %>)){//7 open			

			}//7 close
						
		<%
		}//6 close						
	}// 5 close
}//4 close
%>

<%
if (connsUnique!=null) {//8 open
	if (connsUnique.size()>0) {//9 open
		for (int j=0;j<connsUnique.size();j++) {//10 open
			IConnection connUnique = connsUnique.get(j);
			if (connUnique.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//11 open
				uniqueOutMetadata = connUnique.getMetadataTable();
				
				if(uniqueOutMetadata!=null){//12 open
					List<IMetadataColumn> uniqueOutColumnList = uniqueOutMetadata.getListColumns();
					for (IMetadataColumn uniqueOutColumn : uniqueOutColumnList) {//13 open
						String uniqueOutLabel = uniqueOutColumn.getLabel();		

					}//13 close	
				}//12 close
				

			}//11 close
		}//10 close
	}//9 close
}//8 close				
%>	